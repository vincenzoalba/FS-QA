incr[digs_, base_] := Module[{carry = 1, ndigs = digs, k = 1, nd}, While[k <= Length[digs], {carry, nd} = QuotientRemainder[ndigs[[k]] + carry, base[[k]]]; 
       ndigs[[k]] = nd; If[carry == 0, Break[]]; k = k + 1; ]; ndigs]; 
BNArrange[BNB_, conf_, string_] := Module[{i, cont, k, res, supp}, cont = 1; res = {}; For[i = 1, i <= Length[string], i++, 
      supp = Table[BNB[[i,conf[[k]]]], {k, cont, cont + string[[i]] - 1}]; cont = cont + string[[i]]; AppendTo[res, supp]; ]; res]; 
SelBNB[BNB_] := Module[{i, j, check}, check = 0; For[i = 1, i <= Length[BNB], i++, For[j = 1, j <= Length[BNB[[i]]] - 1, j++, 
        If[BNB[[i,j]] >= BNB[[i,j + 1]], check = 1; ]; ]; ]; check]; 
GenPI[BNconf_] := Module[{i, supp, supp1, fin}, fin = {}; For[i = 1, i <= Length[BNconf], i++, supp = -BNconf[[i]]; supp1 = Sort[Join[supp, BNconf[[i]]]]; 
       AppendTo[fin, supp1]; ]; fin]; 
t[i_, j_] := 2.*Min[i, j] - 1.*KroneckerDelta[i, j]; 
UpB[L_, M_, α_, n_] := (L - 1. - Sum[t[n, j]*α[[j]], {j, 1., M}])/2.; 
GenString[M_] := Block[{part, part1, pair, d, j, k, m, p, check}, 
    m = M; part = Reap[While[m != 0, d = IntegerPart[RandomReal[{1., M + 1 - 1/10^12}]]; j = IntegerPart[RandomReal[{1., M + 1 - 1/10^12}]]; p = RandomReal[{0, 1}]; 
          If[p <= (d*PartitionsP[m - j*d])/(m*PartitionsP[m]), Sow[Table[d, {k, 1, j}]]; m = m - j*d; ]; ]; ]; part1 = Flatten[part]; Table[Count[part1, i], {i, 1, M}]]; 
ChooString[M_, L_, strOl_] := Block[{string, mat, DDol, DDne, i, j, strNe, p, vec, vec1}, string = strOl; mat = Table[t[i, j], {i, 1, M}, {j, 1, M}]; 
     DDol = Product[Binomial[L - Total[Table[mat[[i,j]]*string[[j]], {j, 1, M}]], string[[i]]], {i, 1, M}]; strNe = GenString[M]; 
     DDne = Product[Binomial[L - Total[Table[mat[[i,j]]*strNe[[j]], {j, 1, M}]], strNe[[i]]], {i, 1, M}]; p = RandomReal[{0, 1}]; 
     If[p <= Min[1, DDne/DDol], string = strNe; ]; string]; 
BTsel[M_, L_, α_] := Block[{J, n, k}, J = Table[RandomSample[Table[k, {k, -UpB[L, M, α, n], UpB[L, M, α, n]}], α[[n]]], {n, 1, M}]; J]; 
Theta[x_, m_, n_] := If[n != m, 2*ArcTan[x/Abs[n - m]] + 4*Sum[ArcTan[x/(Abs[n - m] + k)], {k, 2, n + m - Abs[n - m] - 2, 2}] + 2*ArcTan[x/(n + m)], 
    4*Sum[ArcTan[x/k], {k, 2, 2*n - 2, 2}] + 2*ArcTan[x/(2*n)]]; 
SolveBethe[M_, L_, string_, BN_] := Block[{sol, x, n, g, b, m, o, h, check, sol1, bit, EE, EE1, EE2, EE3}, 
    check = 1; bit = 0; sol = Quiet[Table[x[n][g], {n, 1, M}, {g, 1, string[[n]]}] /. 
        FindRoot[Flatten[Table[ArcTan[x[n][g]/n] - (Pi*BN[[n,g]])/L - Sum[If[m != n || b != g, Theta[x[n][g] - x[m][b], m, n], 0], {m, 1, M}, {b, 1, string[[m]]}]/(2*L) == 
            0, {n, 1, M}, {g, 1, string[[n]]}]], Flatten[Table[{x[o][h], RandomReal[]}, {o, 1, M}, {h, 1, string[[o]]}], 1], WorkingPrecision -> 15, MaxIterations -> 200, 
         AccuracyGoal -> 15]]; check = Flatten[Table[ArcTan[sol[[n]][[g]]/n] - (Pi*BN[[n,g]])/L - Sum[If[m != n || b != g, Theta[sol[[n]][[g]] - sol[[m]][[b]], m, n], 0], 
           {m, 1, M}, {b, 1, string[[m]]}]/(2*L), {n, 1, M}, {g, 1, string[[n]]}]]; If[Total[Abs[check]] > 1/10^11, Print["Findroot failed with string"]; Print[BN]; 
       bit = 1; ]; EE = If[M != 0, Plus[Total[Flatten[Table[(2.*n)/(sol[[n,g]]^2. + n^2.), {n, 1, M}, {g, 1, string[[n]]}]]]], -(L/4)]; {bit, EE, BN, Chop[sol]}]; 
PIState[string_, BN_] := Module[{BN1, BN2, i, check, tot}, BN1 = Table[Sort[-BN[[i]]], {i, 1, Length[BN]}]; BN2 = Flatten[BN1]; check = Select[BN2, Abs[#1] < 1/10^13 & ]; 
     tot = Select[Flatten[BN], Abs[#1] > 0 & ]; If[BN == BN1 && check == {}, 0, 1]]; 
NonZeroRap[rap_] := Module[{rap1, check}, rap1 = Flatten[rap]; check = Select[rap1, Abs[#1] < 1/10^12 & ]; If[check == {}, 0, 1]]; 
Dtheta[x_, n_] := (2*n)/(n^2 + x^2); 
DTheta[x_, m_, n_] := If[n != m, (2*Abs[m - n])/(x^2 + Abs[m - n]^2) + 4*Sum[(k + Abs[m - n])/(x^2 + (k + Abs[m - n])^2), {k, 2, n + m - Abs[n - m] - 2, 2}] + 
     (2*(m + n))/((m + n)^2 + x^2), 4*Sum[k/(k^2 + x^2), {k, 2, 2*n - 2, 2}] + (4*n)/(4*n^2 + x^2)]; 
PP[x_, n_] := Module[{k}, If[OddQ[n], (x*Product[((2*k + 1)^2 + x^2)/((2*k)^2 + x^2), {k, 0, Floor[n/2]}])/(4^n*Sqrt[n^2 + x^2]), 
     (Sqrt[n^2 + x^2]*Product[((2*k)^2 + x^2)/((2*k + 1)^2 + x^2), {k, 0, Floor[n/2] - 1}])/(4^n*x)]]; 
PPMG[x_, n_] := Module[{k}, If[OddQ[n], 2^n*(x^2 + n^2)*Product[1/((2*k + 1)^2 + x^2)^2, {k, 0, Floor[n/2]}], 
     2^n*x^2*(x^2 + n^2)*Product[1/((2*k)^2 + x^2)^2, {k, 0, n/2}]]]; 
CGm[i1_, j1_, i2_, j2_, string_, rap_] := Module[{k, l}, If[i1 != i2 || j1 != j2, 2*(DTheta[rap[[i1,j1]] - rap[[i2,j2]], i1, i2] - 
       DTheta[rap[[i1,j1]] + rap[[i2,j2]], i1, i2]), 2*(L - 1)*Dtheta[rap[[i1,j1]], i1] - 4*Sum[Dtheta[rap[[i1,j1]], k], {k, 1, i1 - 1}] - 
      2*Sum[If[i1 != k || j1 != l, DTheta[rap[[i1,j1]] - rap[[k,l]], i1, k] + DTheta[rap[[i1,j1]] + rap[[k,l]], i1, k], 0], {k, 1, Length[string]}, {l, 1, string[[k]]}]]]; 
CGp[i1_, j1_, i2_, j2_, string_, rap_] := Module[{k, l}, If[i1 != i2 || j1 != j2, 2*(DTheta[rap[[i1,j1]] - rap[[i2,j2]], i1, i2] + 
       DTheta[rap[[i1,j1]] + rap[[i2,j2]], i1, i2]), 2*L*Dtheta[rap[[i1,j1]], i1] - 
      2*Sum[If[i1 != k || j1 != l, DTheta[rap[[i1,j1]] - rap[[k,l]], i1, k] + DTheta[rap[[i1,j1]] + rap[[k,l]], i1, k], 0], {k, 1, Length[string]}, {l, 1, string[[k]]}]]]; 
Overlap[string_, rap_, NI_] := Module[{indx, ll, i, j, GGm, GGp}, indx = Flatten[Table[Table[{i, j}, {j, 1, string[[i]]}], {i, 1, Length[string]}], 1]; ll = Total[string]; 
     GGm = Table[CGm[indx[[i,1]], indx[[i,2]], indx[[j,1]], indx[[j,2]], string, rap], {i, 1, ll}, {j, 1, ll}]; 
     GGp = Table[CGp[indx[[i,1]], indx[[i,2]], indx[[j,1]], indx[[j,2]], string, rap], {i, 1, ll}, {j, 1, ll}]; 
     ((Sqrt[2]*NI!*Product[PP[rap[[i,j]], i], {i, 1, Length[string]}, {j, 1, string[[i]]}]*Sqrt[Det[GGp]/Det[GGm]])/Sqrt[(2*NI)!])^2]; 
OverlapMG[string_, rap_, M_] := Module[{j}, Overlap[string, rap, 0]*Product[PPMG[rap[[i,j]], i], {i, 1, Length[string]}, {j, 1, string[[i]]}]^2]; 
KK1[x_] := 2/(x^2 + 1); 
KK12[x_] := 1/(x^2 + 1/4); 
Kp[x_, y_] := KK1[x - y] + KK1[x + y]; 
Km[x_, y_] := KK1[x - y] - KK1[x + y]; 
Gp[j_, k_, rap_] := KroneckerDelta[j, k]*(L*KK12[rap[[j]]] - Sum[Kp[rap[[j]], rap[[p]]], {p, 1, Length[rap]}]) + Kp[rap[[j]], rap[[k]]]; 
Gm[j_, k_, rap_] := KroneckerDelta[j, k]*(L*KK12[rap[[j]]] - Sum[Kp[rap[[j]], rap[[p]]], {p, 1, Length[rap]}]) + Km[rap[[j]], rap[[k]]]; 
index[string_, k_] := Module[{z, cont}, cont = 1; z = k; While[z > 0, z = z - string[[cont]]; cont++; ]; cont - 1]; 
OverlapAll[string_, rap1_, NI_] := Module[{rap, rapstring, rpstr1, k, ll, i, j, GGm, GGp}, rapstring = {}; rap = Flatten[rap1]; 
     For[k = 1, k <= Length[rap], k++, AppendTo[rapstring, Table[rap[[k]]/2 + ((1 + RandomReal[{1/10^5, 1/10^6}])*I*(index[string, k] + 1 - 2*j))/2., 
         {j, 1, index[string, k]}]]; ]; rpstr1 = Flatten[rapstring]; ll = Length[rpstr1]; GGp = Table[Gp[i, j, rpstr1], {i, 1, ll}, {j, 1, ll}]; 
     GGm = Table[Gm[i, j, rpstr1], {i, 1, ll}, {j, 1, ll}]; ((Sqrt[2]*NI!*Product[Sqrt[rpstr1[[j]]^2 + 1/4]/(4*rpstr1[[j]]), {j, 1, ll}]*Sqrt[Det[GGp]/Det[GGm]])/
       Sqrt[(2*NI)!])^2]; 
L = 36; 
cont = 0; 
data = Reap[For[i = L/2, i <= L/2, i++, M = i; NI = L/2 - i; base = Table[IntegerPart[M/j] + 1, {j, 1, M}]; initial = Table[0, {k, 1, M}]; 
       For[r = 1, r <= Product[base[[b]], {b, 1, M}], r++, If[Sum[s*initial[[s]], {s, 1, M}] == M, If[Total[EvenQ[initial]] == Length[initial]*True, 
            string = initial/2; BNBounds = Table[Table[kk, {kk, 0.5, UpB[L, M, 2*string, zz]}], {zz, 1, Length[string]}]; 
             Lbounds = Table[Length[BNBounds[[ii]]], {ii, 1, Length[BNBounds]}]; BNbase = Flatten[Table[Table[Lbounds[[ii]], {jj, 1, string[[ii]]}], 
                {ii, 1, Length[string]}]]; BNinit = Flatten[Table[0, {ii, 1, Length[BNbase]}]]; shift = Table[1, {ii, 1, Length[BNbase]}]; new1 = BNinit + shift; 
             For[rr = 1, rr <= Product[BNbase[[ii]], {ii, 1, Length[BNbase]}], rr++, x = BNArrange[BNBounds, new1, string]; If[SelBNB[x] == 0, 
                BNPI = GenPI[x]; sol = SolveBethe[M, L, initial, BNPI]; If[sol[[1]] == 0, rap1 = Table[Sort[sol[[4,k]]], {k, 1, Length[sol[[4]]]}]; 
                   rap = Table[Table[-rap1[[k,j]], {j, 1, string[[k]]}], {k, 1, Length[sol[[4]]]}]; overlap = OverlapMG[string, rap, 0]; cont++; Print[cont]; 
                   Sow[{string, sol[[2]], Flatten[sol[[3]]], Flatten[sol[[4]]], overlap}]; ]]; new = incr[BNinit, BNbase]; BNinit = new; new1 = new + shift; ]; ]; ]; 
         initial1 = incr[initial, base]; initial = initial1; ]]][[2]]; 
data1 = Flatten[data, 1]; 
Strconf = Table[data1[[i,1]], {i, 1, Length[data1]}]; 
BNumbers = Table[Flatten[data1[[i,3]]], {i, 1, Length[data1]}]; 
Rapidities = Table[data1[[i,4]], {i, 1, Length[data1]}]; 
Obs = Table[{data1[[i,2]], data1[[i,5]]}, {i, 1, Length[data1]}]; 
filename = StringJoin["/scratch/valba/Dimer/Rap_L", ToString[L], ".dat"]; 
filename1 = StringJoin["/scratch/valba/Dimer/StrConf_L", ToString[L], ".dat"]; 
filename2 = StringJoin["/scratch/valba/Dimer/Bnum_L", ToString[L], ".dat"]; 
filename3 = StringJoin["/scratch/valba/Dimer/Obs_L", ToString[L], ".dat"]; 
Export[filename, Rapidities]; 
Export[filename1, Strconf]; 
Export[filename2, BNumbers]; 
Export[filename3, Obs]; 
